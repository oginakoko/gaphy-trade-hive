-- Create necessary tables if they don't exist

CREATE TABLE IF NOT EXISTS public.profiles (
  id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  email text NOT NULL,
  username text NOT NULL UNIQUE CHECK (char_length(username) >= 3),
  avatar_url text,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW(),
  is_admin boolean DEFAULT false
);

CREATE TABLE IF NOT EXISTS public.trade_ideas (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title text NOT NULL,
  content text,
  user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW(),
  instrument text,
  breakdown text,
  image_url text,
  tags text[],
  status text DEFAULT 'open'::text NOT NULL,
  entry_price numeric,
  target_price numeric,
  stop_loss numeric,
  risk_reward numeric,
  sentiment text,
  key_points text[],
  direction text,
  is_pinned boolean DEFAULT false NOT NULL
);

CREATE TABLE IF NOT EXISTS public.servers (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  name text NOT NULL CHECK (char_length(name) >= 3),
  description text,
  image_url text,
  invite_code text UNIQUE,
  owner_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  is_public boolean DEFAULT false,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.server_members (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  server_id uuid REFERENCES public.servers(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  role text NOT NULL CHECK (role IN ('owner', 'admin', 'moderator', 'member')),
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW(),
  UNIQUE(server_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.server_messages (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  content text NOT NULL,
  server_id uuid REFERENCES public.servers(id) ON DELETE CASCADE NOT NULL,
  user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.private_messages (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  content text NOT NULL,
  sender_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  recipient_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.notifications (
  id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
  type text NOT NULL,
  content text NOT NULL,
  sender_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE,
  recipient_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  read boolean DEFAULT false,
  created_at timestamptz NOT NULL DEFAULT NOW(),
  updated_at timestamptz NOT NULL DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.trade_idea_media (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  trade_idea_id bigint REFERENCES public.trade_ideas(id) ON DELETE CASCADE NOT NULL,
  media_type text NOT NULL,
  url text NOT NULL,
  title text,
  description text,
  thumbnail_url text,
  position integer NOT NULL,
  created_at timestamptz DEFAULT now() NOT NULL,
  placeholder_id text
);



DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_class WHERE relname = 'idx_trade_idea_media_placeholder_id') THEN
    CREATE INDEX idx_trade_idea_media_placeholder_id ON public.trade_idea_media (placeholder_id);
  END IF;
END $$;

CREATE TABLE IF NOT EXISTS public.user_follows (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  follower_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  following_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  created_at timestamptz DEFAULT now() NOT NULL,
  UNIQUE(follower_id, following_id)
);

CREATE TABLE IF NOT EXISTS public.unread_message_counts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES public.profiles(id) ON DELETE CASCADE NOT NULL,
  unread_count integer DEFAULT 0 NOT NULL,
  last_checked_at timestamptz DEFAULT now() NOT NULL,
  UNIQUE(user_id)
);

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.servers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.server_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.server_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.private_messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.trade_ideas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.trade_idea_media ENABLE ROW LEVEL SECURITY;

-- RLS Policies for trade_ideas
DROP POLICY IF EXISTS "Trade ideas are viewable by everyone." ON public.trade_ideas;
CREATE POLICY "Trade ideas are viewable by everyone."
  ON public.trade_ideas
  FOR SELECT
  USING (true);

DROP POLICY IF EXISTS "Users can create trade ideas." ON public.trade_ideas;
CREATE POLICY "Users can create trade ideas."
  ON public.trade_ideas
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own trade ideas." ON public.trade_ideas;
CREATE POLICY "Users can update their own trade ideas."
  ON public.trade_ideas
  FOR UPDATE
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own trade ideas." ON public.trade_ideas;
CREATE POLICY "Users can delete their own trade ideas."
  ON public.trade_ideas
  FOR DELETE
  USING (auth.uid() = user_id);

-- RLS Policies for trade_idea_media
DROP POLICY IF EXISTS "Trade idea media is viewable by everyone." ON public.trade_idea_media;
CREATE POLICY "Trade idea media is viewable by everyone."
  ON public.trade_idea_media
  FOR SELECT
  USING (true);

DROP POLICY IF EXISTS "Users can upload media for their trade ideas." ON public.trade_idea_media;
CREATE POLICY "Users can upload media for their trade ideas."
  ON public.trade_idea_media
  FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.trade_ideas
      WHERE trade_ideas.id = trade_idea_media.trade_idea_id
      AND trade_ideas.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can update their own trade idea media." ON public.trade_idea_media;
CREATE POLICY "Users can update their own trade idea media."
  ON public.trade_idea_media
  FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM public.trade_ideas
      WHERE trade_ideas.id = trade_idea_media.trade_idea_id
      AND trade_ideas.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can delete their own trade idea media." ON public.trade_idea_media;
CREATE POLICY "Users can delete their own trade idea media."
  ON public.trade_idea_media
  FOR DELETE
  USING (
    EXISTS (
      SELECT 1 FROM public.trade_ideas
      WHERE trade_ideas.id = trade_idea_media.trade_idea_id
      AND trade_ideas.user_id = auth.uid()
    )
  );
ALTER TABLE public.user_follows ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.unread_message_counts ENABLE ROW LEVEL SECURITY;

-- RLS Policies for profiles
DROP POLICY IF EXISTS "Profiles are viewable by everyone." ON public.profiles;
CREATE POLICY "Profiles are viewable by everyone."
  ON public.profiles
  FOR SELECT
  USING (true);

DROP POLICY IF EXISTS "Users can update own profile." ON public.profiles;
CREATE POLICY "Users can update own profile."
  ON public.profiles
  FOR UPDATE
  USING (auth.uid() = id);

-- RLS Policies for servers
DROP POLICY IF EXISTS "Public servers are viewable by everyone." ON public.servers;
CREATE POLICY "Public servers are viewable by everyone."
  ON public.servers
  FOR SELECT
  USING (is_public = true OR auth.uid() = owner_id);

DROP POLICY IF EXISTS "Server owners can update their servers." ON public.servers;
CREATE POLICY "Server owners can update their servers."
  ON public.servers
  FOR ALL
  USING (auth.uid() = owner_id);

-- RLS Policies for server_members
DROP POLICY IF EXISTS "Server members are viewable by everyone." ON public.server_members;
CREATE POLICY "Server members are viewable by everyone."
  ON public.server_members
  FOR SELECT
  USING (true);

DROP POLICY IF EXISTS "Users can join public servers." ON public.server_members;
CREATE POLICY "Users can join public servers."
  ON public.server_members
  FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.servers s
      WHERE s.id = server_members.server_id
      AND (s.is_public = true OR s.uid() = s.owner_id)
    )
    AND auth.uid() = user_id
    AND role = 'member'
  );

DROP POLICY IF EXISTS "Server owners and admins can manage members." ON public.server_members;
CREATE POLICY "Server owners and admins can manage members."
  ON public.server_members
  FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM public.server_members sm
      WHERE sm.server_id = server_members.server_id
      AND sm.user_id = auth.uid()
      AND sm.role IN ('owner', 'admin')
    )
  );

-- RLS Policies for server_messages
DROP POLICY IF EXISTS "Server messages are viewable by server members." ON public.server_messages;
CREATE POLICY "Server messages are viewable by server members."
  ON public.server_messages
  FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.server_members
      WHERE server_members.server_id = server_messages.server_id
      AND server_members.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can create messages in servers they are members of." ON public.server_messages;
CREATE POLICY "Users can create messages in servers they are members of."
  ON public.server_messages
  FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.server_members
      WHERE server_members.server_id = server_messages.server_id
      AND server_members.user_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Users can delete their own messages." ON public.server_messages;
CREATE POLICY "Users can delete their own messages."
  ON public.server_messages
  FOR DELETE
  USING (auth.uid() = user_id);

-- RLS Policies for private_messages
DROP POLICY IF EXISTS "Users can view their own private messages." ON public.private_messages;
CREATE POLICY "Users can view their own private messages."
  ON public.private_messages
  FOR SELECT
  USING (auth.uid() IN (sender_id, recipient_id));

DROP POLICY IF EXISTS "Users can send private messages." ON public.private_messages;
CREATE POLICY "Users can send private messages."
  ON public.private_messages
  FOR INSERT
  WITH CHECK (auth.uid() = sender_id);

-- RLS Policies for notifications
DROP POLICY IF EXISTS "Users can view their own notifications." ON public.notifications;
CREATE POLICY "Users can view their own notifications."
  ON public.notifications
  FOR SELECT
  USING (auth.uid() = recipient_id);

DROP POLICY IF EXISTS "Users can mark their notifications as read." ON public.notifications;
CREATE POLICY "Users can mark their notifications as read."
  ON public.notifications
  FOR UPDATE
  USING (auth.uid() = recipient_id);

-- RLS Policies for trade_ideas
DROP POLICY IF EXISTS "Anyone can view trade ideas." ON public.trade_ideas;
CREATE POLICY "Anyone can view trade ideas."
  ON public.trade_ideas
  FOR SELECT
  USING (true);

DROP POLICY IF EXISTS "Users can create their own trade ideas." ON public.trade_ideas;
CREATE POLICY "Users can create their own trade ideas."
  ON public.trade_ideas
  FOR INSERT
  WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own trade ideas." ON public.trade_ideas;
CREATE POLICY "Users can update their own trade ideas."
  ON public.trade_ideas
  FOR UPDATE
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own trade ideas." ON public.trade_ideas;
CREATE POLICY "Users can delete their own trade ideas."
  ON public.trade_ideas
  FOR DELETE
  USING (auth.uid() = user_id);

-- RLS Policies for trade_idea_media
DROP POLICY IF EXISTS "Anyone can view trade idea media." ON public.trade_idea_media;
CREATE POLICY "Anyone can view trade idea media."
  ON public.trade_idea_media
  FOR SELECT
  USING (true);

DROP POLICY IF EXISTS "Users can manage their own trade idea media." ON public.trade_idea_media;
CREATE POLICY "Users can manage their own trade idea media."
  ON public.trade_idea_media
  FOR ALL
  USING (EXISTS (SELECT 1 FROM public.trade_ideas ti WHERE ti.id = trade_idea_media.trade_idea_id AND ti.user_id = auth.uid()));

-- RLS Policies for user_follows
DROP POLICY IF EXISTS "Users can view their own follows." ON public.user_follows;
CREATE POLICY "Users can view their own follows."
  ON public.user_follows
  FOR SELECT
  USING (auth.uid() IN (follower_id, following_id));

DROP POLICY IF EXISTS "Users can manage their own follows." ON public.user_follows;
CREATE POLICY "Users can manage their own follows."
  ON public.user_follows
  FOR ALL
  USING (auth.uid() = follower_id);

-- RLS Policies for unread_message_counts
DROP POLICY IF EXISTS "Users can view their own unread counts." ON public.unread_message_counts;
CREATE POLICY "Users can view their own unread counts."
  ON public.unread_message_counts
  FOR SELECT
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own unread counts." ON public.unread_message_counts;
CREATE POLICY "Users can update their own unread counts."
  ON public.unread_message_counts
  FOR UPDATE
  USING (auth.uid() = user_id);

-- Storage Buckets and RLS Policies

-- Avatars Bucket
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM storage.buckets WHERE name = 'avatars') THEN
    INSERT INTO storage.buckets (id, name, public)
    VALUES ('avatars', 'avatars', true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Anyone can view avatars' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Anyone can view avatars"
      ON storage.objects FOR SELECT TO public
      USING (bucket_id = 'avatars');
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can upload their own avatar' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Users can upload their own avatar"
      ON storage.objects FOR INSERT TO authenticated
      WITH CHECK (bucket_id = 'avatars' AND auth.uid() = owner);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can update their own avatar' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Users can update their own avatar"
      ON storage.objects FOR UPDATE TO authenticated
      USING (bucket_id = 'avatars' AND auth.uid() = owner);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Users can delete their own avatar' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Users can delete their own avatar"
      ON storage.objects FOR DELETE TO authenticated
      USING (bucket_id = 'avatars' AND auth.uid() = owner);
  END IF;
END $$;

-- Server Images Bucket
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM storage.buckets WHERE name = 'server-images') THEN
    INSERT INTO storage.buckets (id, name, public)
    VALUES ('server-images', 'server-images', true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Anyone can view server images' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Anyone can view server images"
      ON storage.objects FOR SELECT TO public
      USING (bucket_id = 'server-images');
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Server owners can upload server images' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Server owners can upload server images"
      ON storage.objects FOR INSERT TO authenticated
      WITH CHECK (bucket_id = 'server-images' AND EXISTS (SELECT 1 FROM public.servers WHERE public.servers.owner_id = auth.uid()));
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Server owners can update server images' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Server owners can update server images"
      ON storage.objects FOR UPDATE TO authenticated
      USING (bucket_id = 'server-images' AND EXISTS (SELECT 1 FROM public.servers WHERE public.servers.owner_id = auth.uid()));
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Server owners can delete server images' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Server owners can delete server images"
      ON storage.objects FOR DELETE TO authenticated
      USING (bucket_id = 'server-images' AND EXISTS (SELECT 1 FROM public.servers WHERE public.servers.owner_id = auth.uid()));
  END IF;
END $$;

-- Trade Videos Bucket
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM storage.buckets WHERE name = 'trade-videos') THEN
    INSERT INTO storage.buckets (id, name, public)
    VALUES ('trade-videos', 'trade-videos', true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Anyone can view trade videos' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Anyone can view trade videos"
      ON storage.objects FOR SELECT TO public
      USING (bucket_id = 'trade-videos');
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Admins can upload trade videos' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Admins can upload trade videos"
      ON storage.objects FOR INSERT TO authenticated
      WITH CHECK (bucket_id = 'trade-videos' AND EXISTS ( SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.is_admin = true));
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Admins can update trade videos' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Admins can update trade videos"
      ON storage.objects FOR UPDATE TO authenticated
      USING (bucket_id = 'trade-videos' AND EXISTS ( SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.is_admin = true));
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Admins can delete trade videos' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Admins can delete trade videos"
      ON storage.objects FOR DELETE TO authenticated
      USING (bucket_id = 'trade-videos' AND EXISTS ( SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.is_admin = true));
  END IF;
END $$;

-- Trade Images Bucket
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM storage.buckets WHERE name = 'trade-images') THEN
    INSERT INTO storage.buckets (id, name, public)
    VALUES ('trade-images', 'trade-images', true);
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Anyone can view trade images' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Anyone can view trade images"
      ON storage.objects FOR SELECT TO public
      USING (bucket_id = 'trade-images');
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Admins can upload trade images' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Admins can upload trade images"
      ON storage.objects FOR INSERT TO authenticated
      WITH CHECK (bucket_id = 'trade-images' AND EXISTS ( SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.is_admin = true));
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Admins can update trade images' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Admins can update trade images"
      ON storage.objects FOR UPDATE TO authenticated
      USING (bucket_id = 'trade-images' AND EXISTS ( SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.is_admin = true));
  END IF;
END $$;

DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_policies WHERE policyname = 'Admins can delete trade images' AND tablename = 'objects' AND schemaname = 'storage') THEN
    CREATE POLICY "Admins can delete trade images"
      ON storage.objects FOR DELETE TO authenticated
      USING (bucket_id = 'trade-images' AND EXISTS ( SELECT 1 FROM public.profiles WHERE profiles.id = auth.uid() AND profiles.is_admin = true));
  END IF;
END $$;

-- Functions and Triggers (assuming these are already defined or will be in other migrations)
-- For example, a trigger to update 'updated_at' columns:
-- CREATE OR REPLACE FUNCTION public.set_updated_at()
-- RETURNS TRIGGER AS $$
-- BEGIN
--   NEW.updated_at = NOW();
--   RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;

-- CREATE TRIGGER set_profiles_updated_at
-- BEFORE UPDATE ON public.profiles
-- FOR EACH ROW EXECUTE FUNCTION public.set_updated_at();

-- And so on for other tables with 'updated_at' columns.

-- Example for auto_follow_admin (if needed)
-- CREATE OR REPLACE FUNCTION public.auto_follow_admin()
-- RETURNS TRIGGER AS $$
-- BEGIN
--   INSERT INTO public.user_follows (follower_id, following_id)
--   VALUES (NEW.id, (SELECT id FROM public.profiles WHERE is_admin = true LIMIT 1));
--   RETURN NEW;
-- END;
-- $$ LANGUAGE plpgsql;

-- CREATE TRIGGER on_auth_user_created
-- AFTER INSERT ON auth.users
-- FOR EACH ROW EXECUTE FUNCTION public.auto_follow_admin();

-- Note: The 'trade_ideas' table is referenced by 'trade_idea_media' but its schema is not provided here.
-- It is assumed to exist or be created in another migration file.